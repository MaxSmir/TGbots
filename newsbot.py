import requests
from pycbrf import ExchangeRates
import datetime
from keyboards import client_keyboards
from database import Postgres
from create_bot import bot
import atexit

connection = Postgres.open_connection()
atexit.register(Postgres.close_connection, connection)


@bot.message_handler(commands=['start'])
def start(message):
    connection = Postgres.open_connection()
    result_users = Postgres.list_user(connection)
    Postgres.close_connection(connection)
    if not result_users or message.chat.id not in list(result_users[0]):
        bot.send_message(message.chat.id, "–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?")
        bot.register_next_step_handler(message, add_name_database)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –∏–º—è, –Ω–∞–ø–∏—à–∏—Ç–µ \n'/rename' ",
                         reply_markup=client_keyboards.markup_start)
    print(message)


def add_name_database(message):
    try:
        connection = Postgres.open_connection()
        Postgres.add_user(connection, message.text, message.chat.id, message.chat.username)
        Postgres.close_connection(connection)
        bot.send_message(message.chat.id, f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:",
                         reply_markup=client_keyboards.markup_region)
    except Exception as e:
        print("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", e)
        bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.')
        bot.register_next_step_handler(message, add_name_database)


@bot.message_handler(func=lambda message: message.text == '–ò—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤')
def list_region(message):
    bot.send_message(message.chat.id, text='–°–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤', reply_markup=client_keyboards.choice_region())


@bot.message_handler(func=lambda message: message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é')
def list_region(message):
    bot.send_message(message.chat.id, text='–î—É—Ä–∞–∫', reply_markup=client_keyboards.choice_region())

@bot.message_handler(commands=['currency'])
def currency(message):
    currency = ExchangeRates(datetime.datetime.now())
    usd = round(currency.rates[13].rate, 2)
    eur = round(currency.rates[14].rate, 2)
    data = currency.date_received
    bot.send_message(message.chat.id,
                     f'–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –¶–ë –†–§ –Ω–∞ {str(data).split(" ")[0]}  \n üá∫üá∏ –ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞: {usd}—Ä—É–±. '
                     f'\n üá™üá∫ –ö—É—Ä—Å –µ–≤—Ä–æ: {eur}—Ä—É–±.', reply_markup=client_keyboards.markup_start)


@bot.message_handler(commands=['rename'])
def print_rename(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                     reply_markup=client_keyboards.types.ReplyKeyboardRemove())
    # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    bot.register_next_step_handler(message, rename)



def rename(message):
    if len(message.text) > 40:
        bot.send_message(message.chat.id, '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.')
        bot.register_next_step_handler(message, rename)
    else:
        connection = Postgres.open_connection()
        Postgres.rename_user(connection, message.text, message.chat.id)
        Postgres.close_connection(connection)
        bot.send_message(message.chat.id, f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, {message.text}")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=client_keyboards.markup_start)


@bot.message_handler(commands=['change_region'])
def print_change_region(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:",
                       reply_markup=client_keyboards.markup_region)


def change_region(message):
    if message.text:
        region = message.text
        bot.send_message(message.chat.id, f"–í–∞—à —Ä–µ–≥–∏–æ–Ω: {region}", reply_markup=client_keyboards.markup_category)
        connection = Postgres.open_connection()
        Postgres.change_region(connection, message.text, message.chat.id)
        Postgres.close_connection(connection)
    elif message.location:
        gps_location(message)


@bot.message_handler(commands=['help'])
def start(message):
    help_text = ("–î–∞–Ω–Ω—ã–π —á–∞—Ç-–±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ä–µ–≥–∏–æ–Ω—É.\n\n"
                 "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ - /change_region \n –î–ª—è –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç - /currency \n"
                 "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è /rename \n")
    bot.send_message(message.chat.id, text=help_text, parse_mode='html',
                     reply_markup=client_keyboards.types.ReplyKeyboardRemove())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å –≤–∞–ª—é—Ç')
def reply_to_hello(message):
    currency(message)


@bot.message_handler(func=lambda message: message.text == '–ù–æ–≤–æ—Å—Ç–∏')
def news(message):
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=client_keyboards.markup_category)


@bot.callback_query_handler(func=lambda call: call.data in Postgres.get_list_region(connection))
def otv(call):
    Postgres.change_region(connection, call.data, call.message.chat.id)
    region = call.data
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                          text=f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω {region}!')
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=client_keyboards.markup_start)


@bot.message_handler(func=lambda message: message.text in ['–≠–∫–æ–Ω–æ–º–∏–∫–∞', '–ü–æ–ª–∏—Ç–∏–∫–∞', '–û–±—â–µ—Å—Ç–≤–æ', '–°–æ–±—ã—Ç–∏—è'])
def categories(message):
    bot.send_message(chat_id=message.chat.id,text=f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {message.text}",
                     reply_markup=client_keyboards.markup_start, parse_mode="Markdown")
    connection = Postgres.open_connection()
    region = Postgres.get_region_user(connection, message.chat.id)
    Postgres.change_category(connection, message.text, message.chat.id)
    news_list = Postgres.get_news(connection, region, message.text)
    Postgres.close_connection(connection)
    page = 0
    if not news_list:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        chunks = split_text(news_list[0][0])
        for chunk in chunks:
            # print(chunk)
            print(len(chunk))
            header, body = chunk.split('\n', 1)
            bot.send_message(message.chat.id,  f"*{header}*\n{body}",
                             reply_markup=client_keyboards.first_pagination(page), parse_mode="Markdown")
    print(region)


def split_text(text, max_length=4096):
    chunks = []
    len_url = 40
    print("–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è", len(text))
    while text:
        if len(text) <= max_length:
            chunks.append(text)
            break
        else:
            # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –±–ª–∏–∂–∞–π—à–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏,
            # –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
            index = text.rfind('\n', 0, max_length - len_url)
            if index == -1:
                index = max_length  # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
            chunk = text[:index] + "\n"
            index_url = text.rfind('\n')
            chunk += text[index_url:]
            chunks.append(chunk)
            print("–î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", len(chunk))
            break
    return chunks


@bot.callback_query_handler(func=lambda call: call.data.startswith("NumberPage"))
def callback_handler(call):
    connection = Postgres.open_connection()
    region = Postgres.get_region_user(connection, call.message.chat.id)
    category_input = Postgres.get_category_news(connection, call.message.chat.id)
    news_list = Postgres.get_news(connection, region, category_input)
    Postgres.close_connection(connection)
    if not news_list:
        bot.send_message(call.message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        page = (call.data.split('_')[0]).split(':')[1]
        news_item = news_list[int(page)]
        chunks = split_text(news_item[0])
        for chunk in chunks:
            if news_item == news_list[-1]:
                header, body = chunk.split('\n', 1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                      text=f"*{header}*\n{body}",
                                      reply_markup=client_keyboards.last_pagination(page), parse_mode="Markdown")
            elif news_item == news_list[0]:
                header, body = chunk.split('\n', 1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                      text=f"*{header}*\n{body}",
                                      reply_markup=client_keyboards.first_pagination(page), parse_mode="Markdown")
            else:
                header, body = chunk.split('\n', 1)
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id,
                                      text=f"*{header}*\n{body}",
                                      reply_markup=client_keyboards.pagination(page), parse_mode="Markdown")

@bot.message_handler(content_types='text')
def text(message):
    print(message.text)
    bot.reply_to(message, text="–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É")


@bot.message_handler(content_types=['location'])
def gps_location(message):
    if (message.reply_to_message is not None and
            message.reply_to_message.text == "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:"):
        headers = {"accept": "application/json"}
        latitude = message.location.latitude
        longitude = message.location.longitude
        address = requests.get(f'https://eu1.locationiq.com/v1/reverse.php?key=pk.c8fe742bdf75864d0a31edef1671e54d&lat={latitude}&lon={longitude}&accept-language=rus&format=json', headers=headers).json()
        print(address['address'].get('state'))
        region = address['address'].get('state')
        bot.send_message(message.chat.id, f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω {region}!')
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:", reply_markup=client_keyboards.markup_start)
        print(address)
        connection = Postgres.open_connection()
        Postgres.change_region(connection, region, message.chat.id)
        Postgres.close_connection(connection)
    else:
        bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é", reply_markup=client_keyboards.markup_start)


